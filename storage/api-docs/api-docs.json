{
    "openapi": "3.0.0",
    "info": {
        "title": "one piece 3mk",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000/api",
            "description": "Localhost API Server"
        }
    ],
    "paths": {
        "/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Registers a new user by validating the phone number, code, and user details.",
                "operationId": "f367ea894b2ac44a9607f8e0a9a03537",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "password",
                                    "phone_number",
                                    "code"
                                ],
                                "properties": {
                                    "first_name": {
                                        "description": "The user's first name",
                                        "type": "string",
                                        "maxLength": 50
                                    },
                                    "last_name": {
                                        "description": "The user's last name",
                                        "type": "string",
                                        "maxLength": 50
                                    },
                                    "password": {
                                        "description": "The user's password",
                                        "type": "string"
                                    },
                                    "phone_number": {
                                        "description": "The user's phone number",
                                        "type": "string"
                                    },
                                    "photo": {
                                        "description": "Profile photo (optional)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "code": {
                                        "description": "Verification code sent to the user",
                                        "type": "string",
                                        "maxLength": 6
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User Created Successfully"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "sample-sanctum-token"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "phone_number": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The phone number field is required."
                                                    }
                                                },
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The verification code must be exactly 6 digits."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "description": "Logs in a user by validating the phone number and password.",
                "operationId": "ec9c379d2a959de66404708dd4a9322d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone_number",
                                    "password"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "description": "The user's phone number",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "The user's password",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User logged in successfully"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "sample-sanctum-token"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid phone number or password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Phone & Password do not match our record."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "phone_number": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The phone number field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "description": "Logs out the user by deleting their active Sanctum token.",
                "operationId": "cc14526f9abd470d63047b1c05aef0c3",
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - No active token found or invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user}/update": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Updates the details of the  user. Requires authentication.",
                "operationId": "f147f03be63cfa949647924c1405265c",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User ID to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "Doe"
                                    },
                                    "photo": {
                                        "description": "Photo of the user in jpg, jpeg, png, gif formats",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token - not the same user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "first_name": [
                                                    "The first name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/password/forget": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Reset user password",
                "description": "Allows a user to reset their password by providing their phone number, verification code, and new password",
                "operationId": "e5692a0bba7fb2d99d2b8bc18e9ca77a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone_number",
                                    "password",
                                    "password_confirmation",
                                    "code"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "description": "User's phone number.",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "password": {
                                        "description": "New password for the user.",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newPassword123!"
                                    },
                                    "password_confirmation": {
                                        "description": "Confirmation for the new password.",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newPassword123!"
                                    },
                                    "code": {
                                        "description": "6-digit verification code sent to the user's phone.",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "phone_number": [
                                                    "The phone number field is required."
                                                ],
                                                "password": [
                                                    "The password field must be at least 8 characters."
                                                ],
                                                "code": [
                                                    "The code field must be a valid 6-digit number."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired verification code.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid code"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "General error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "An unexpected error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/password/reset": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Reset user password",
                "operationId": "86e2265d7e55bcfa2f7931a420b46c45",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "old_password",
                                    "new_password"
                                ],
                                "properties": {
                                    "old_password": {
                                        "description": "The current password of the user",
                                        "type": "string"
                                    },
                                    "new_password": {
                                        "description": "The new password to set for the user",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successfully!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Incorrect old password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Wrong old password!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity - Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "old_password": {
                                                    "description": "Validation errors for the old_password field",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "new_password": {
                                                    "description": "Validation errors for the new_password field",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/verificationCode/send": {
            "post": {
                "tags": [
                    "Verification"
                ],
                "summary": "Send a verification code to the phone number",
                "description": "Sends a verification code to the provided phone number either for registration or password recovery.",
                "operationId": "9b7199e1ea15ebcb2084d2aa631e93af",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone_number"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "description": "The phone number to which the verification code will be sent. Must start with '09' and be 10 digits long.",
                                        "type": "string",
                                        "example": "0947777777"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification code sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Indicates whether the request was successful.",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "description": "The success message.",
                                            "type": "string",
                                            "example": "Verification code sent successfully to 0947777777"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "phone_number": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The phone number must start with '09' and be exactly 10 digits."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/verificationCode/check": {
            "post": {
                "tags": [
                    "Verification"
                ],
                "summary": "Check if the verification code is valid",
                "description": "Validates the phone number and the verification code.",
                "operationId": "f326f65054edddbcc1f94bda0d9e2085",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone_number",
                                    "code"
                                ],
                                "properties": {
                                    "phone_number": {
                                        "description": "The phone number to verify, must start with '09' and be 10 digits long.",
                                        "type": "string",
                                        "example": "0947777777"
                                    },
                                    "code": {
                                        "description": "The verification code consisting of exactly 6 digits.",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification code is valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Indicates whether the request was successful.",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "description": "The success message.",
                                            "type": "string",
                                            "example": "Verification code is valid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "phone_number": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The phone number field is required."
                                                    }
                                                },
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The verification code must be exactly 6 digits."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Retrieve a list of all categories. Any authorized user can access this endpoint, regardless of their role.",
                "operationId": "587f46baa4e7c203f775335ea1533cec",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user}/orders": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get orders for a specific user",
                "description": "Retrieve orders for a specific user, optionally filtered by creation date. Only the authenticated user can access their own orders.",
                "operationId": "66956db7e296268e35ae6313df643215",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Sort orders by creation date (asc or desc)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "orders": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users",
                    "Orders"
                ],
                "summary": "Create a new order for a user",
                "description": "Allows the authenticated user to create a new order with a list of products. The user must be authorized to place an order.",
                "operationId": "0ffd0a8d42567c17e6333f529f553825",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body for creating an order",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "products"
                                ],
                                "properties": {
                                    "products": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "id",
                                                "quantity"
                                            ],
                                            "properties": {
                                                "id": {
                                                    "description": "Product ID",
                                                    "type": "integer"
                                                },
                                                "quantity": {
                                                    "description": "Quantity of the product",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error, invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to create order"
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to create an order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user}/orders/{order}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a specific order for the authenticated user",
                "description": "Retrieve a specific order of the authenticated user by order ID.",
                "operationId": "949db64c3e2330070ae2d44e3e96a074",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details for the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "order": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to view this order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user}/orders/{order}/suborders": {
            "get": {
                "tags": [
                    "Users",
                    "Orders"
                ],
                "summary": "Get paginated sub-orders for a specific order",
                "description": "Retrieve paginated sub-orders of a specific order for the authenticated user with optional filtering by status.",
                "operationId": "883731589522990f1073ed3a6c1fc113",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter sub-orders by status (processing, shipped, delivered)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "processing",
                                "shipped",
                                "delivered"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of sub-orders for the order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SubOrder"
                                            }
                                        },
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 100
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to view sub-orders for this order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user}/orders/{order}/suborders/{subOrder}": {
            "get": {
                "tags": [
                    "Users",
                    "Orders",
                    "SubOrders"
                ],
                "summary": "Get details of a specific sub-order",
                "description": "Retrieve details of a specific sub-order for a specific order of the authenticated user.",
                "operationId": "bc87ec406ccf9fd7661221d741b1f04e",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "subOrder",
                        "in": "path",
                        "description": "ID of the sub-order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sub-order details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "sub_order": {
                                            "$ref": "#/components/schemas/SubOrder"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Sub-order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sub-order not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to view sub-order details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/favourites/products": {
            "get": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Get user products favourites",
                "description": "Retrieve the authenticated user's favourite products.",
                "operationId": "48b1b1ce86b5af227228da7bbb0650c3",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved favourite products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "favourites": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Product"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve favourites"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/favourites/products/{product}": {
            "post": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Add a product to favourites",
                "description": "Add a product to the authenticated user's favourite list.",
                "operationId": "0fdde7ad97d0296594bb03c319fcd1bb",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The ID of the product to be added to favourites",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product added to favourites successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product added to favourites"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Product is already in the favourite list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product is already in your favourite list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to add favourite",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to add favourite"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found in favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Object not fount "
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Remove a product from favourites",
                "description": "Remove a product from the authenticated user's favourite list.",
                "operationId": "425701a74d83e5d493f0145a325a43a9",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The ID of the product to be removed from favourites",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product removed from favourites successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product removed from favourites"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found in favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not Found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Object not fount"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a list of products with optional search and filtering",
                "operationId": "a2f6016e5bef16a083b1be073789b7d3",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by product names to filter products",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter options for products must from [best_selling,latest,top_rated,recommended]",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products with additional user-specific information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "description": "Current page of the paginated results",
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Product"
                                            }
                                        },
                                        "first_page_url": {
                                            "description": "URL for the first page of results",
                                            "type": "string"
                                        },
                                        "last_page_url": {
                                            "description": "URL for the last page of results",
                                            "type": "string"
                                        },
                                        "next_page_url": {
                                            "description": "URL for the next page of results",
                                            "type": "string"
                                        },
                                        "prev_page_url": {
                                            "description": "URL for the previous page of results",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid search or filter parameters"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/products/{product}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a specific product by ID",
                "operationId": "cb06f46365fbb9c65892d84a25cfb29f",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The unique identifier for the product",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested product details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "product": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/products/{product}/rate": {
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Rate a product",
                "operationId": "dafb2d482542749df0ab2255747e323e",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The unique identifier for the product",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "rate"
                                ],
                                "properties": {
                                    "rate": {
                                        "description": "Rating value between 1 and 5",
                                        "type": "integer",
                                        "example": 4
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product rating successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Status of the operation",
                                            "type": "boolean"
                                        },
                                        "product": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity - Validation error for rate",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "rate": {
                                                    "description": "Validation errors for the rate",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication is required"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/promotions": {
            "get": {
                "tags": [
                    "Promotions"
                ],
                "summary": "List all promotion requests",
                "description": "Retrieve a paginated list of promotion requests. Only accessible to admins.",
                "operationId": "c8c045593b5a1722c3d403e44455300e",
                "parameters": [
                    {
                        "name": "accepted",
                        "in": "query",
                        "description": "Filter promotions by their acceptance status. Use 'true' for accepted requests and 'false' for pending requests.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of promotion requests retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "user_id": {
                                                                "type": "integer",
                                                                "example": 5
                                                            },
                                                            "accepted_at": {
                                                                "type": "string",
                                                                "format": "datetime",
                                                                "example": "2024-12-01 12:00:00",
                                                                "nullable": true
                                                            },
                                                            "created_at": {
                                                                "type": "string",
                                                                "format": "datetime",
                                                                "example": "2024-12-01 10:00:00"
                                                            },
                                                            "updated_at": {
                                                                "type": "string",
                                                                "format": "datetime",
                                                                "example": "2024-12-01 11:00:00"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 20
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 2
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. User does not have the required admin role.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You do not have permission to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unexpected error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/promotions/create": {
            "post": {
                "tags": [
                    "Promotions"
                ],
                "summary": "Create a promotion request",
                "description": "Allows a user to send a promotion request to become a manager. Users can only send one request, and users with an existing manager role cannot send a request.",
                "operationId": "1bab51f30ad1982ae47624afab8784f2",
                "responses": {
                    "201": {
                        "description": "Promotion request created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Promotion request created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:34:56.000000Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:34:56.000000Z"
                                                },
                                                "accepted_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-12-01T12:34:56.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request due to one of the following reasons: the user already has a manager role, or a promotion request already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "you already have a manager role"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/promotions/{promotion}/accept": {
            "post": {
                "tags": [
                    "Promotions"
                ],
                "summary": "Promote a user to a Manager role",
                "description": "Allows an authorized admin to promote a user by accepting their promotion request.",
                "operationId": "4bb8e407043d57788847e89ba7b1ea9d",
                "parameters": [
                    {
                        "name": "promotion",
                        "in": "path",
                        "description": "ID of the promotion request",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User promoted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User Promoted Successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. User does not have the required admin role.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You do not have permission to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion request not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Promotion request not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unexpected error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/promotions/{promotion}/reject": {
            "post": {
                "tags": [
                    "Promotions"
                ],
                "summary": "Reject a promotion request",
                "description": "Rejects a promotion request by deleting it. Only accessible to admins.",
                "operationId": "03b9515974b8467c1c51ef5ed83a7f9e",
                "parameters": [
                    {
                        "name": "promotion",
                        "in": "path",
                        "description": "ID of the promotion request to be rejected",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Promotion request rejected successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User Promotion rejected Successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion request not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Promotion not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. User does not have the required admin role.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You do not have permission to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unexpected error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}/contacts": {
            "get": {
                "tags": [
                    "Stores",
                    "Contacts"
                ],
                "summary": "Get all contacts for a store",
                "description": "Retrieve all contacts associated with a specific store.",
                "operationId": "2062ac05cb156674031fe4197a26706a",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "contacts": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Contact"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Object not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "An error occurred while fetching the contacts"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stores",
                    "Contacts"
                ],
                "summary": "Add a new contact to a store",
                "description": "Only the manager and owner of the store can add contacts. The store can have up to 5 contacts at most .",
                "operationId": "016deecf05bfc9c5ee13395a28b61e39",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "type",
                                    "value"
                                ],
                                "properties": {
                                    "type": {
                                        "description": "The contact type (e.g., phone, email)",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "The contact value (e.g., phone number or email address)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contact created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact created successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Cannot add more than 5 contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You cannot add more than 5 contacts."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not authorized to add contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}/contacts/{contact}": {
            "put": {
                "tags": [
                    "Stores",
                    "Contacts"
                ],
                "summary": "Update a contact for a store",
                "description": "Only the manager and owner of the store can update a contact.",
                "operationId": "aa1b62e043d232c3592cb0aefc9419e8",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contact",
                        "in": "path",
                        "description": "The unique identifier of the contact",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "example": "email"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "contact@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contact updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact updated successfully."
                                        },
                                        "contact": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "email"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "example": "contact@example.com"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not authorized to update contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Stores",
                    "Contacts"
                ],
                "summary": "Delete a contact from a store",
                "description": "Only the manager and owner of the store can delete a contact.",
                "operationId": "68b7e2716cf3a20c4597328c36910c71",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contact",
                        "in": "path",
                        "description": "The unique identifier of the contact",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not authorized to delete contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Contact not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Contact not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/favourites/stores": {
            "get": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Get Favourite Stores",
                "description": "Retrieve a list of the user's favourite stores.",
                "operationId": "getFavouriteStores",
                "responses": {
                    "200": {
                        "description": "List of favourite stores",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Request status",
                                            "type": "boolean"
                                        },
                                        "favourites": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Store"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "Exception message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "favourites/stores/{store}": {
            "post": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Add Store to Favourites",
                "description": "Add a store to the user's list of favourites.",
                "operationId": "addFavouriteStore",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The ID of the store to add to favourites",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Store added to favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store added to favourites"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Store already in favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Store is already in your favourite list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to add favourite",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to add favourite"
                                        },
                                        "message": {
                                            "description": "Exception message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/favourites/stores/{store}": {
            "delete": {
                "tags": [
                    "Favourites"
                ],
                "summary": "Remove Store from Favourites",
                "description": "Remove a store from the user's list of favourites.",
                "operationId": "removeFavouriteStore",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The ID of the store to remove from favourites",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store removed from favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store removed from favourites"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found in favourites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Object not fount"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/stores/{store}/categories": {
            "get": {
                "tags": [
                    "Stores",
                    "Categories"
                ],
                "summary": "Get categories of a store",
                "description": "Retrieve the list of categories for a given store. Accessible by any authorized user.",
                "operationId": "d4ef63ca59ba31073a84e55bcfdc7e2f",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of store categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "categories": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Electronics"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Category description"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to access the store categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Stores",
                    "Categories"
                ],
                "summary": "Update store categories",
                "description": "Allows the store owner to update the categories associated with the store. The input must be an array of existing category IDs.",
                "operationId": "ad7eedee20c04e8c8fea247270925d9f",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "categories": {
                                        "description": "Array of category IDs to associate with the store",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Categories updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error during update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong. Please try again later."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to update categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/stores": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get a paginated list of stores",
                "operationId": "8ae0a5173f5bf65aa536d2e4d49a10a8",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search query to filter stores by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of stores retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "stores": {
                                            "properties": {
                                                "current_page": {
                                                    "description": "Current page number",
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "description": "List of stores",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Store"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "description": "URL of the first page",
                                                    "type": "string"
                                                },
                                                "from": {
                                                    "description": "Index of the first store in the current page",
                                                    "type": "integer",
                                                    "nullable": true
                                                },
                                                "last_page": {
                                                    "description": "Total number of pages",
                                                    "type": "integer"
                                                },
                                                "last_page_url": {
                                                    "description": "URL of the last page",
                                                    "type": "string"
                                                },
                                                "links": {
                                                    "description": "Pagination links",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "url": {
                                                                "description": "URL for the page",
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "label": {
                                                                "description": "Label for the page",
                                                                "type": "string"
                                                            },
                                                            "active": {
                                                                "description": "Indicates if the page is active",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "next_page_url": {
                                                    "description": "URL of the next page",
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "path": {
                                                    "description": "Base URL for the resource",
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "description": "Number of items per page",
                                                    "type": "integer"
                                                },
                                                "prev_page_url": {
                                                    "description": "URL of the previous page",
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "to": {
                                                    "description": "Index of the last store in the current page",
                                                    "type": "integer",
                                                    "nullable": true
                                                },
                                                "total": {
                                                    "description": "Total number of stores available",
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "properties": {
                                                "search": {
                                                    "description": "Validation errors for the search query",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stores"
                ],
                "summary": "Create a new store",
                "description": "Create a new store if the user is a manager and does not already have a store.",
                "operationId": "836c75fd6d864bfb3c30c30d52117fb1",
                "requestBody": {
                    "description": "Store data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "The name of the store",
                                        "type": "string",
                                        "maxLength": 50
                                    },
                                    "description": {
                                        "description": "Description of the store",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "photo": {
                                        "description": "The photo of the store",
                                        "type": "string",
                                        "format": "uri",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Store created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store created successfully"
                                        },
                                        "store": {
                                            "$ref": "#/components/schemas/Store"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden: User is not authorized to create a store or already has a store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get store details",
                "description": "Fetch the details of a specific store including its contacts, locations, and categories.",
                "operationId": "e4a410483e46b70b41da1a70f83f5e39",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the store details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "store": {
                                            "$ref": "#/components/schemas/Store"
                                        },
                                        "contacts": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Contact"
                                            }
                                        },
                                        "locations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Location"
                                            }
                                        },
                                        "categories": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Object not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stores"
                ],
                "summary": "Update store details",
                "description": "Update an existing store's details including optional photo upload.",
                "operationId": "ca16bcb1a8292ed8f216995920121366",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Store data",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [],
                                "properties": {
                                    "name": {
                                        "description": "The name of the store",
                                        "type": "string",
                                        "maxLength": 50
                                    },
                                    "description": {
                                        "description": "Description of the store",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "photo": {
                                        "description": "The photo of the store (optional)",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Store updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden: User is not authorized to update this store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}/orders": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get paginated orders of a store",
                "description": "Retrieve orders for a specific store with optional filtering by status and sorting by date. User must be the owner of the store.",
                "operationId": "2a196f02482cc6eade073f762fb3eb2d",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter orders by status (processing, shipped, delivered)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "processing",
                                "shipped",
                                "delivered"
                            ]
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Sort orders by creation date (asc or desc)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of sub-orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SubOrder"
                                            }
                                        },
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 100
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to view sub-orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Object not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}/orders/{order}": {
            "post": {
                "tags": [
                    "Stores"
                ],
                "summary": "Update order status",
                "description": "Update the status of an order. Only the owner of the store can update the status to the next status in the flow.",
                "operationId": "9d357acf6fe10b3188f851c5f4f33848",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The new status for the order. Must be the next status in the flow.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "processing",
                                "shipped",
                                "delivered"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order status updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Order status updated successfully."
                                        },
                                        "order": {
                                            "$ref": "#/components/schemas/SubOrder"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status transition. Can only move to the next status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid status transition. Can only move to the next status."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to update order status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store or order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store or order not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stores/{store}/products": {
            "get": {
                "tags": [
                    "Stores",
                    "Products"
                ],
                "summary": "Get products for a specific store paginated",
                "description": "Fetch a list of products from a specific store, with an optional search filter.",
                "operationId": "740044c4c1b1f70a68f4fbb56ec6b2aa",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "The search term to filter products by (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Product"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden, the user is not authorized to create a product for this store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Stores",
                    "Products"
                ],
                "summary": "Create a new product for a store",
                "description": "Create a new product within a specific store. The user must be a manager and the store owner. Validation for fields such as name, price, discount, quantity, and category is applied.",
                "operationId": "189a337476524890f38eb4fbe54ab27e",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "quantity",
                                    "category_id"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "The name of the product",
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "price": {
                                        "description": "The price of the product (greater than 0)",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "discount": {
                                        "description": "The discount on the product (between 0 and 100)",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "quantity": {
                                        "description": "The available quantity of the product (min: 1)",
                                        "type": "integer"
                                    },
                                    "expire_date": {
                                        "description": "The expiration date of the product (optional)",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "photo": {
                                        "description": "The product image (optional, max size: 3MB)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "category_id": {
                                        "description": "The category ID the product belongs to (must exist in categories table)",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product created successfully."
                                        },
                                        "product": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden, the user is not authorized to create a product for this store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to create product: Error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/stores/{store}/products/{product}": {
            "post": {
                "tags": [
                    "Stores",
                    "Products"
                ],
                "summary": "Update an existing product",
                "description": "Update the details of an existing product within a store. The user must be the store's manager and owner to update the product.",
                "operationId": "168748c70cb7cf2893a9d1c232c1573e",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "The unique identifier of the store",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The unique identifier of the product",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "discount",
                                    "quantity",
                                    "category_id"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "The name of the product",
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "price": {
                                        "description": "The price of the product (greater than 0)",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "discount": {
                                        "description": "The discount on the product (between 0 and 100)",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "quantity": {
                                        "description": "The available quantity of the product (min: 1)",
                                        "type": "integer"
                                    },
                                    "expire_date": {
                                        "description": "The expiration date of the product (optional)",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "photo": {
                                        "description": "The product image (optional, max size: 3MB)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "category_id": {
                                        "description": "The category ID the product belongs to (must exist in categories table)",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product updated successfully."
                                        },
                                        "product": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Forbidden, the user is not authorized to update this product",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found, the product does not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update product: Error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get paginated list of users",
                "description": "Retrieve users with optional filtering by role. Only accessible by admin.",
                "operationId": "1ac7a967d2134b8502ddb9f7a2addc4e",
                "parameters": [
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Filter users by role",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "user",
                                "manager"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 100
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "description": "Retrieve a user by their ID. Only accessible by the user themselves or an admin.",
                "operationId": "b3ee55cd13394829c1233a608b64c7c6",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user}/locations": {
            "get": {
                "tags": [
                    "Users",
                    "Locations"
                ],
                "summary": "Get locations of a user",
                "description": "Retrieve the locations (name, longitude, and latitude) for a specific user.",
                "operationId": "dc8b927ad770c7bd6b8f21fc9bb9d261",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of locations for the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "locations": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "name": {
                                                        "description": "Name of the location",
                                                        "type": "string"
                                                    },
                                                    "longitude": {
                                                        "description": "Longitude of the location",
                                                        "type": "number",
                                                        "format": "float"
                                                    },
                                                    "latitude": {
                                                        "description": "Latitude of the location",
                                                        "type": "number",
                                                        "format": "float"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Object not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to view locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users",
                    "Locations"
                ],
                "summary": "Add locations for a user",
                "description": "Allows the authenticated user to add locations with longitude, latitude, and name. A maximum of 5 locations can be added.",
                "operationId": "2d58885eb5fb2868b0a847e3776cb30f",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body for adding locations",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "locations"
                                ],
                                "properties": {
                                    "locations": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "longitude",
                                                "latitude",
                                                "name"
                                            ],
                                            "properties": {
                                                "longitude": {
                                                    "description": "Longitude of the location",
                                                    "type": "number",
                                                    "format": "float"
                                                },
                                                "latitude": {
                                                    "description": "Latitude of the location",
                                                    "type": "number",
                                                    "format": "float"
                                                },
                                                "name": {
                                                    "description": "Name of the location",
                                                    "type": "string",
                                                    "maxLength": 50
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Locations added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Locations added successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error, invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized to add locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "required": [
                    "id",
                    "first_name",
                    "last_name",
                    "phone_number",
                    "created_at",
                    "updated_at",
                    "roles_status"
                ],
                "properties": {
                    "id": {
                        "description": "The user's unique ID",
                        "type": "integer"
                    },
                    "first_name": {
                        "description": "The user's first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The user's last name",
                        "type": "string"
                    },
                    "phone_number": {
                        "description": "The user's phone number",
                        "type": "string"
                    },
                    "photo": {
                        "description": "Profile photo URL or base64 encoded (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of when the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of when the user was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "roles_status": {
                        "description": "The user's roles status",
                        "required": [
                            "manager",
                            "admin",
                            "user"
                        ],
                        "properties": {
                            "manager": {
                                "description": "Indicates if the user is a manager",
                                "type": "boolean"
                            },
                            "admin": {
                                "description": "Indicates if the user is an admin",
                                "type": "boolean"
                            },
                            "user": {
                                "description": "Indicates if the user is a regular user",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Category": {
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "Category unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Category name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Order": {
                "required": [
                    "id",
                    "user_id",
                    "total",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the order",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "The ID of the user who placed the order",
                        "type": "integer",
                        "example": 1
                    },
                    "total": {
                        "description": "The total amount of the order",
                        "type": "integer",
                        "example": 1000
                    },
                    "created_at": {
                        "description": "The timestamp when the order was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-02T14:00:00Z"
                    },
                    "updated_at": {
                        "description": "The timestamp when the order was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-02T14:00:00Z"
                    }
                },
                "type": "object"
            },
            "Product": {
                "required": [
                    "id",
                    "name",
                    "price",
                    "quantity",
                    "category_id",
                    "store_id",
                    "rate",
                    "sales",
                    "created_at",
                    "updated_at",
                    "your_rate",
                    "your_favourite"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the product",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the product",
                        "type": "string"
                    },
                    "store_id": {
                        "description": "The ID of the store the product belongs to",
                        "type": "integer"
                    },
                    "price": {
                        "description": "The price of the product in the smallest currency unit (e.g., cents)",
                        "type": "integer"
                    },
                    "discount": {
                        "description": "Discount percentage for the product",
                        "type": "integer",
                        "default": 0,
                        "maximum": 100,
                        "minimum": 0
                    },
                    "quantity": {
                        "description": "The available quantity of the product",
                        "type": "integer"
                    },
                    "category_id": {
                        "description": "The ID of the category the product belongs to",
                        "type": "integer"
                    },
                    "expire_date": {
                        "description": "The expiration date of the product, if applicable",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "photo": {
                        "description": "The URL of the product's photo or image path",
                        "type": "string",
                        "nullable": true
                    },
                    "rate": {
                        "description": "The average rating of the product",
                        "type": "number",
                        "format": "float",
                        "default": 0,
                        "maximum": 5,
                        "minimum": 0
                    },
                    "sales": {
                        "description": "The total number of sales for the product",
                        "type": "integer",
                        "default": 0
                    },
                    "your_rate": {
                        "description": "The rating given by the authenticated user to this product, default is 0",
                        "type": "integer"
                    },
                    "your_favourite": {
                        "description": "Indicates whether the product is marked as a favourite by the authenticated user",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Timestamp of when the product was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of when the product was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Contact": {
                "required": [
                    "id",
                    "store_id",
                    "type",
                    "value"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the contact",
                        "type": "integer"
                    },
                    "store_id": {
                        "description": "The ID of the store the contact belongs to",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The type of contact (e.g., phone, email)",
                        "type": "string"
                    },
                    "value": {
                        "description": "The contact value (e.g., phone number, email address)",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the contact was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the contact was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Timestamp when the contact was soft deleted",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Store": {
                "required": [
                    "id",
                    "name",
                    "user_id",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the store",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the store",
                        "type": "string",
                        "maxLength": 50
                    },
                    "user_id": {
                        "description": "The ID of the user who owns the store",
                        "type": "integer"
                    },
                    "description": {
                        "description": "A description of the store",
                        "type": "string",
                        "nullable": true
                    },
                    "photo": {
                        "description": "URL or path to the store's photo",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp when the store was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the store was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Timestamp when the store was soft deleted",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Location": {
                "required": [
                    "name",
                    "latitude",
                    "longitude"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the location",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the location",
                        "type": "string",
                        "maxLength": 50
                    },
                    "latitude": {
                        "description": "Latitude of the location",
                        "type": "decimal",
                        "format": "float"
                    },
                    "longitude": {
                        "description": "Longitude of the location",
                        "type": "decimal",
                        "format": "float"
                    },
                    "object_id": {
                        "description": "An optional ID of an associated object",
                        "type": "integer",
                        "nullable": true
                    },
                    "object_type": {
                        "description": "An optional type for the associated object",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "SubOrder": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "order_id": {
                        "description": "ID of the main order",
                        "type": "integer",
                        "example": 101
                    },
                    "status": {
                        "description": "Status of the sub-order",
                        "type": "string",
                        "enum": [
                            "processing",
                            "shipped",
                            "delivered"
                        ],
                        "example": "processing"
                    },
                    "total": {
                        "description": "Total amount for the sub-order",
                        "type": "integer",
                        "example": 5000
                    },
                    "store_id": {
                        "description": "ID of the store",
                        "type": "integer",
                        "example": 10
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-02T12:00:00Z"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Use 'Bearer <token>' in the Authorization header",
                "bearerFormat": "Sanctum",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Users",
            "description": "Users"
        },
        {
            "name": "Verification",
            "description": "Verification"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "SubOrders",
            "description": "SubOrders"
        },
        {
            "name": "Favourites",
            "description": "Favourites"
        },
        {
            "name": "Products",
            "description": "Products"
        },
        {
            "name": "Promotions",
            "description": "Promotions"
        },
        {
            "name": "Stores",
            "description": "Stores"
        },
        {
            "name": "Contacts",
            "description": "Contacts"
        },
        {
            "name": "Locations",
            "description": "Locations"
        }
    ]
}